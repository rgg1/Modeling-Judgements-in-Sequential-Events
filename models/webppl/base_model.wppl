// Helper function to adjust probability based on previous outcomes
var adjustProb = function(theta, alpha, streakWeight, recentOutcomes) {
    if (recentOutcomes.length === 0) return theta;
    
    var getStreakLength = function(outcomes) {
        if (outcomes.length === 0) {
            return 0;
        }
        var current = outcomes[outcomes.length - 1];
    
        var helper = function(index, streak) {
            if (index < 0) {
                return streak;
            } else if (outcomes[index] === current) {
                return helper(index - 1, streak + 1);
            } else {
                return streak;
            }
        };
    
        return helper(outcomes.length - 2, 1);
    };    
    
    var streakLength = getStreakLength(recentOutcomes);
    // Exponential growth in streak effect
    var streakEffect = streakWeight * (1 - Math.exp(-alpha * streakLength));
    var lastOutcome = recentOutcomes[recentOutcomes.length-1];
    
    return lastOutcome ? 
        theta + streakEffect * (1 - theta) : 
        theta - streakEffect * theta;
};

// Domain-specific parameters
var domainPriors = {
    'coin': {
        thetaMean: 0.5,     
        thetaStrength: 20,  // Strong prior near 0.5
        alphaMean: 0.05,    // Very slight tendency for alternation
        alphaStrength: 15,  // Strong prior - coins should be "random"
        streakWeight: 0.1   // Low impact of streaks
    },
    'basketball': {
        thetaMean: 0.5,     
        thetaStrength: 5,   // Weaker prior
        alphaMean: 0.4,     // Strong streak dependency
        alphaStrength: 2,   // Weak prior - learn from data
        streakWeight: 0.4   // Higher impact of streaks
    }
};

// Generate a sequence with specific domain model parameters
var generateDependentSequence = function(theta, alpha, streakWeight, length) {
    var generator = function(n, acc) {
        if (n <= 0) return acc;
        
        var recentOutcomes = acc.slice(Math.max(0, acc.length-3));
        var adjustedTheta = acc.length === 0 ? 
            theta : 
            adjustProb(theta, alpha, streakWeight, recentOutcomes);
            
        var newOutcome = flip(adjustedTheta);
        return generator(n-1, acc.concat([newOutcome]));
    };
    
    return generator(length, []);
};

// Model for predicting next outcome given sequence
var predictNext = function(sequence, domain) {
    var priors = domainPriors[domain];
    
    return Infer({method: 'MCMC', samples: 2000}, function() {
        var theta = beta(priors.thetaMean * priors.thetaStrength, 
                        (1-priors.thetaMean) * priors.thetaStrength);
        var alpha = beta(priors.alphaMean * priors.alphaStrength,
                        (1-priors.alphaMean) * priors.alphaStrength);
        
        // Generate multiple sequences
        var numSimulations = 10;
        var simulatedSeqs = repeat(numSimulations, function() {
            return generateDependentSequence(theta, alpha, priors.streakWeight, sequence.length);
        });
        
        // Compare with observed sequence
        var matchScore = sum(map(function(simSeq) {
            return sum(map2(function(sim, obs) {
                return sim === obs ? 0 : -1;
            }, simSeq, sequence));
        }, simulatedSeqs)) / numSimulations;
        
        factor(matchScore);
        
        // Predict next outcome
        var recentOutcomes = sequence.slice(Math.max(0, sequence.length-3));
        var nextProb = adjustProb(theta, alpha, priors.streakWeight, recentOutcomes);
        return flip(nextProb);
    });
};

// Helper functions for classification
var getMaxInArray = function(arr) {
    return reduce(function(acc, val) {
        return val > acc ? val : acc;
    }, arr[0], arr.slice(1));
};

var countConsecutive = function(arr) {
    var helper = function(index, currentVal, currentStreak, streaks) {
        if (index >= arr.length) {
            return append(streaks, currentStreak);
        }
        if (arr[index] === currentVal) {
            return helper(index + 1, currentVal, currentStreak + 1, streaks);
        }
        return helper(index + 1, arr[index], 1, append(streaks, currentStreak));
    };
    
    if (arr.length === 0) return [];
    return helper(1, arr[0], 1, []);
};

// Sequence classification model
var classifySequence = function(sequence) {
    return Infer({method: 'MCMC', samples: 2000}, function() {
        var domain = flip(0.5) ? 'coin' : 'basketball';
        var priors = domainPriors[domain];
        
        // Calculate streakiness score
        var streakScore = function(seq) {
            var streaks = countConsecutive(seq);
            return streaks.length > 0 ? getMaxInArray(streaks) : 0;
        };
        
        var observedStreakiness = streakScore(sequence);
        
        // Generate and evaluate sequences
        var numSimulations = 10;
        var simulatedStreaks = repeat(numSimulations, function() {
            var simSeq = generateDependentSequence(
                beta(priors.thetaMean * priors.thetaStrength,
                     (1-priors.thetaMean) * priors.thetaStrength),
                beta(priors.alphaMean * priors.alphaStrength,
                     (1-priors.alphaMean) * priors.alphaStrength),
                priors.streakWeight,
                sequence.length
            );
            return streakScore(simSeq);
        });
        
        var avgSimStreak = sum(simulatedStreaks) / numSimulations;
        var streakDiff = Math.abs(observedStreakiness - avgSimStreak);
        
        // Score based on domain expectations
        var streakFactor = domain === 'basketball' ? 
            2 * observedStreakiness - streakDiff :  // Prefer streaky sequences for basketball
            -2 * observedStreakiness - streakDiff;  // Prefer alternating sequences for coin
            
        factor(streakFactor);
        
        return domain;
    });
};


// Calculate streakiness score
var getStreakiness = function(sequence) {
    var helper = function(i, currentRun, runs) {
        if (i >= sequence.length) return runs.concat([currentRun]);
        if (sequence[i] === sequence[i-1]) {
            return helper(i+1, currentRun+1, runs);
        }
        return helper(i+1, 1, runs.concat([currentRun]));
    };
    
    if (sequence.length === 0) return 0;
    var runs = helper(1, 1, []);
    return sum(runs) / runs.length;
};

var testSequences = [
    [true, true, false, false, true, false, true, false, false, true],  // alternating
    [true, true, true, false, false, true, true, false, false, false]   // streaky
];

// Run tests
map(function(sequence) {
    console.log("\nTesting sequence: " + sequence);
    console.log("Streakiness score: " + getStreakiness(sequence));
    
    var classification = classifySequence(sequence);
    var bballProb = expectation(classification, function(x) { return x === 'basketball' ? 1 : 0; });
    console.log("Probability it's basketball: " + bballProb.toFixed(3));
    
    var coinPred = predictNext(sequence, 'coin');
    var coinProb = expectation(coinPred, function(x) { return x ? 1 : 0; });
    console.log("If coin, probability of True: " + coinProb.toFixed(3));
    
    var bballPred = predictNext(sequence, 'basketball');
    var bballNextProb = expectation(bballPred, function(x) { return x ? 1 : 0; });
    console.log("If basketball, probability of True: " + bballNextProb.toFixed(3));
}, testSequences);

// Define the actual sequences from our human experiments
var experimentSequences = {
    sequential: [
        {sequence: [true, false, false, true, false, true, true, true, false, false]},
        {sequence: [false, true, false, false, true, false, true, true, false, true]}
    ],
    classification: {
        alternating: [
            [true, false, true, false, true, false, true, false, true, false],
            [true, true, false, false, true, false, true, false, false, true]
        ],
        streaky: [
            [true, true, true, false, false, true, true, false, false, false],
            [true, true, true, true, true, false, false, false, false, false]
        ]
    }
};

// Run model for sequential predictions
var getSequentialPredictions = function(sequence) {
    var predictions = map(function(i) {
        if (i === 0) return null;  // Skip first position as in human experiment (first turn is given)
        
        // Get sequence up to current position
        var prevSequence = sequence.slice(0, i);
        
        // Get model predictions for both domains
        var coinPred = expectation(predictNext(prevSequence, 'coin'));
        var bballPred = expectation(predictNext(prevSequence, 'basketball'));
        
        return {
            position: i,
            prevSequence: prevSequence,
            coinPrediction: coinPred,
            basketballPrediction: bballPred
        };
    }, _.range(sequence.length));
    
    return predictions;
};

// Run model for domain classification
var getSequenceClassification = function(sequence) {
    var classification = classifySequence(sequence);
    var bballProb = expectation(classification, function(x) { return x === 'basketball' ? 1 : 0; });
    var streakiness = getStreakiness(sequence);
    
    return {
        basketballProb: bballProb,
        streakiness: streakiness
    };
};

// Results object
var results = {
    sequentialPredictions: map(function(seqData) {
        return {
            sequence: seqData.sequence,
            predictions: map(function(i) {
                if (i === 0) return null;
                var prevSequence = seqData.sequence.slice(0, i);
                return {
                    position: i,
                    prevSequence: prevSequence,
                    coinPrediction: expectation(predictNext(prevSequence, 'coin')),
                    basketballPrediction: expectation(predictNext(prevSequence, 'basketball'))
                };
            }, _.range(seqData.sequence.length))
        };
    }, experimentSequences.sequential),
    
    classificationPredictions: {
        alternating: map(function(seq) {
            var classification = classifySequence(seq);
            return {
                sequence: seq,
                basketballProb: expectation(classification, function(x) { 
                    return x === 'basketball' ? 1 : 0;
                })
            };
        }, experimentSequences.classification.alternating),
        
        streaky: map(function(seq) {
            var classification = classifySequence(seq);
            return {
                sequence: seq,
                basketballProb: expectation(classification, function(x) { 
                    return x === 'basketball' ? 1 : 0;
                })
            };
        }, experimentSequences.classification.streaky)
    },
};

// Print results
console.log("=== MODEL PREDICTIONS ===");
console.log(JSON.stringify(results, null, 2));